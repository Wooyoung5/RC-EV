#define PWM_MAX_DUTY      255
#define PWM_MIN_F_DUTY    50
#define PWM_MIN_B_DUTY    50
#define PWM_START_DUTY    100
 
byte bldc_step = 0, motor_speed, pin_state, toggle;
int pulsewidth = 0;


void setup()
{
  DDRD  |= 0xE0;
  PORTD  = 0x00;
  DDRB  |= 0x0E;  
  PORTB  = 0x00;   
  
  TCCR1A = 0;
  TCCR1B = 0x01;

  TCCR2A = 0;
  TCCR2B = 0x01;
  
  PCICR = EIMSK = 0;
 
  pinMode(2, INPUT_PULLUP);
  pinMode(3, INPUT_PULLUP);
  pinMode(4, INPUT_PULLUP);
}
 
// pin change interrupt 2 (PCINT2) ISR
ISR (PCINT2_vect)
{
  if( (PIND & PCMSK2) != pin_state )
    return;
  // BEMF debounce
  for(byte i = 0; i < 20; i++)
  {
    if(bldc_step & 1){
      if(PIND & PCMSK2)     i -= 1;
    }
    else {
      if(!(PIND & PCMSK2))  i -= 1;
    }
  }
 
  if(toggle & 1)   {
    bldc_move();
  }
  else    {
    bldc_back_move();
  }
    
  bldc_step++;
  bldc_step %= 6;
  
}


 
// BLDC motor commutation function
void bldc_move()
{
  switch(bldc_step)
  {
    case 0:
      AH_BL();
      BEMF_C_FALLING();
      break;
    case 1:
      AH_CL();
      BEMF_B_RISING();
      break;
    case 2:
      BH_CL();
      BEMF_A_FALLING();
      break;
    case 3:
      BH_AL();
      BEMF_C_RISING();
      break;
    case 4:
      CH_AL();
      BEMF_B_FALLING();
      break;
    case 5:
      CH_BL();
      BEMF_A_RISING();
  }
}

void bldc_back_move()
{
  switch(bldc_step)
  {
    case 0:
      AH_CL();
      BEMF_B_FALLING();
      break;
    case 1:
      AH_BL();
      BEMF_C_RISING();
      break;
    case 2:
      CH_BL();
      BEMF_A_FALLING();
      break;
    case 3:
      CH_AL();
      BEMF_B_RISING();
      break;
    case 4:
      BH_AL();
      BEMF_C_FALLING();
      break;
    case 5:
      BH_CL();
      BEMF_A_RISING();
  }
}
 
void loop()
{
  
  delay(500);
  
  while(1)
  {  
    pulsewidth = pulseInLong(13, HIGH, 25000);


    if(pulsewidth > 1620)   {

      SET_PWM_DUTY(PWM_START_DUTY);
      int i = 5000;


      while(i > 100)
      {
        delayMicroseconds(i);
        bldc_move();
        bldc_step++;
        bldc_step %= 6;
        i = i - 20;
      }

      motor_speed = PWM_START_DUTY;

      toggle = 1;
      PCICR  = 4;

      while(1)
      {
        pulsewidth = pulseInLong(13, HIGH, 25000);
        motor_speed = (pulsewidth / 4) - 350;

        if(motor_speed < PWM_MIN_F_DUTY)   {
          PCICR = 0;
          PORTD  = 0x00;
          PORTB  = 0x00;
          bldc_step = 0;
          break;
        }
        SET_PWM_DUTY(motor_speed);
      }
    }

    else if(pulsewidth < 1384 & pulsewidth > 952)   {

      SET_PWM_DUTY(PWM_START_DUTY);
      int i = 5000;


      while(i > 100)
      {
        delayMicroseconds(i);
        bldc_back_move();
        bldc_step++;
        bldc_step %= 6;
        i = i - 20;
      }

      motor_speed = PWM_START_DUTY;

      toggle = 0;
      PCICR  = 4;

      while(1)
      {
        pulsewidth = pulseInLong(13, HIGH, 25000);
        motor_speed = 228 - (pulsewidth / 8);

        if(motor_speed < PWM_MIN_B_DUTY)   {
          PCICR = 0;
          PORTD  = 0x00;
          PORTB  = 0x00;
          bldc_step = 0;
          break;
        }
        SET_PWM_DUTY(motor_speed);
      }
    }
  }
}

 
void BEMF_A_RISING()
{
  PCMSK2 = 0x04;    // enable Arduino pin 2 (PCINT18) interrupt, others are disabled
  pin_state = 0x04;
}
void BEMF_A_FALLING()
{
  PCMSK2 = 0x04;    // enable Arduino pin 2 (PCINT18) interrupt, others are disabled
  pin_state = 0;
}
void BEMF_B_RISING()
{
  PCMSK2 = 0x08;    // enable Arduino pin 3 (PCINT19) interrupt, others are disabled
  pin_state = 0x08;
}
void BEMF_B_FALLING()
{
  PCMSK2 = 0x08;    // enable Arduino pin 3 (PCINT19) interrupt, others are disabled
  pin_state = 0;
}
void BEMF_C_RISING()
{
  PCMSK2 = 0x10;    // enable Arduino pin 4 (PCINT20) interrupt, others are disabled
  pin_state = 0x10;
}
void BEMF_C_FALLING()
{
  PCMSK2 = 0x10;    // enable Arduino pin 4 (PCINT20) interrupt, others are disabled
  pin_state = 0;
}
 
void AH_BL()
{
  PORTD &= ~0xA0;
  PORTD |=  0x40;
  TCCR1A =  0;      // turn pin 11 (OC2A) PWM ON (pin 9 & pin 10 OFF)
  TCCR2A =  0x81;   //
}
void AH_CL()
{
  PORTD &= ~0xC0;
  PORTD |=  0x20;
  TCCR1A =  0;      // turn pin 11 (OC2A) PWM ON (pin 9 & pin 10 OFF)
  TCCR2A =  0x81;   //
}
void BH_CL()
{
  PORTD &= ~0xC0;
  PORTD |=  0x20;
  TCCR2A =  0;       // turn pin 10 (OC1B) PWM ON (pin 9 & pin 11 OFF)
  TCCR1A =  0x21;    //
}
void BH_AL()
{
  PORTD &= ~0x60;
  PORTD |=  0x80;
  TCCR2A =  0;      // turn pin 10 (OC1B) PWM ON (pin 9 & pin 11 OFF)
  TCCR1A =  0x21;   //
}
void CH_AL()
{
  PORTD &= ~0x60;
  PORTD |=  0x80;
  TCCR2A =  0;       // turn pin 9 (OC1A) PWM ON (pin 10 & pin 11 OFF)
  TCCR1A =  0x81;    //
}
void CH_BL()
{
  PORTD &= ~0xA0;
  PORTD |=  0x40;
  TCCR2A =  0;       // turn pin 9 (OC1A) PWM ON (pin 10 & pin 11 OFF)
  TCCR1A =  0x81;    //
}


 
void SET_PWM_DUTY(byte duty)
{
  OCR1A  = duty;  // set pin 9  PWM duty cycle
  OCR1B  = duty;  // set pin 10 PWM duty cycle
  OCR2A  = duty;  // set pin 11 PWM duty cycle
}
